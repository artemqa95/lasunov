{"version":3,"sources":["components/Layout/Layout.js","components/UI/Button/Button.js","components/UI/Input/Input.js","store/actions/actionTypes.js","store/actions/auth.js","components/Auth/Auth.js","components/Logout/Logout.js","components/UI/select/Select.js","store/actions/main.js","components/UI/Loader/Loader.js","components/Table/Table.js","components/UI/Pagination/Pagination.js","components/Main/Main.js","App.js","store/reducers/auth.js","store/reducers/main.js","store/reducers/rootReducer.js","index.js"],"names":["Layout","props","className","children","Button","cls","type","onClick","disabled","join","isInvalid","valid","touched","shouldValidate","Input","inputType","htmlFor","Math","random","push","label","id","value","onChange","errorMessage","AUTH_SUCCESS","AUTH_LOGOUT","FETCH_COMPANIES_LIST","FETCH_HOUSES_LIST","CHANGE_COMPANY_ITEM","GET_PAGES_INFO","CHANGE_CURRENT_PAGE","REMOVE_CURRENT_HOUSES","autoLogout","time","dispatch","setTimeout","logout","localStorage","removeItem","authSuccess","token","Auth","state","isFormValid","formControls","email","validation","required","password","minLength","loginHandler","auth","submitHandler","event","preventDefault","onChangeHandler","controlName","control","target","validateControl","Object","keys","forEach","name","setState","isValid","trim","is","length","this","map","index","onSubmit","renderInputs","React","Component","connect","a","authData","username","axios","post","response","data","console","log","expirationDate","Date","expiresIn","setItem","access","getTime","Logout","to","Select","options","option","text","getHouses","company","getState","removeHouses","main","currentCompany","changePageNumInState","pagInfo","paginationInfo","companies","find","element","changeCurrentCompany","url","currentPage","elementsPerPage","get","headers","Authorization","newPagInfo","links","houses","pageNum","changeCurrentPage","Loader","style","textAlign","Table","rows","house","address","reestrFlatCount","createdAt","toLocaleDateString","Pagination","info","pagesCount","ceil","objectsCount","paginationEnd","paginationCenter","filter","pageNumber","pagination","onChangePage","Main","selectChangeHandler","changePageHandler","changePagPage","Number","textContent","getCompanies","table","page","App","autoLogin","routes","path","component","isAuthenticated","exact","withRouter","getItem","initialState","loading","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72fda49f.chunk.js","sourcesContent":["const Layout = props => {\r\n    return (\r\n        <div className={'Layout'}>\r\n            <main>\r\n                {props.children}\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Layout","import React from \"react\";\r\nimport './Button.css'\r\nconst Button = props => {\r\n    const cls = ['Button', `${props.type}`]\r\n    return (\r\n        <button onClick={props.onClick}\r\n                disabled={props.disabled}\r\n                className={cls.join(' ')}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\nexport default Button","import React from 'react';\r\nimport './Input.css'\r\n\r\nfunction isInvalid({valid, touched,  shouldValidate }) {\r\n    return !valid && shouldValidate && touched\r\n}\r\n\r\nconst Input = props => {\r\n    const inputType = props.type || 'text'\r\n    const cls = ['Input']\r\n    const htmlFor = `${inputType}-${Math.random()}`\r\n    if (isInvalid(props)) {\r\n        cls.push('invalid')\r\n    }\r\n    return (\r\n        <div className={cls.join('  ')}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <input\r\n                type={inputType}\r\n                id={htmlFor}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n            {isInvalid(props)? <span>{props.errorMessage || \"Введите верное значение\"}</span>: null}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input","export const AUTH_SUCCESS = 'AUTH_SUCCESS'\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\r\nexport const FETCH_COMPANIES_LIST = 'FETCH_COMPANIES_LIST'\r\nexport const FETCH_HOUSES_LIST = 'FETCH_HOUSES_LIST'\r\nexport const CHANGE_COMPANY_ITEM = 'CHANGE_COMPANY_ITEM'\r\nexport const GET_PAGES_INFO = 'GET_PAGES_INFO'\r\nexport const CHANGE_CURRENT_PAGE = 'CHANGE_CURRENT_PAGE'\r\nexport const REMOVE_CURRENT_HOUSES = 'REMOVE_CURRENT_HOUSES'","import axios from \"axios\";\r\nimport {AUTH_LOGOUT, AUTH_SUCCESS} from \"./actionTypes\";\r\n\r\nexport function auth(email, password) {\r\n    return async dispatch => {\r\n        const authData = {\r\n            username:email, password\r\n        }\r\n\r\n        let url = 'http://test-alpha.reestrdoma.ru/api/login/'\r\n        const response = await axios.post(url, authData)\r\n        const data = response.data.data;\r\n        console.log(data)\r\n        const expirationDate = new Date(data.expiresIn)\r\n        localStorage.setItem('token', data.token.access)\r\n        localStorage.setItem('expirationDate', expirationDate)\r\n        dispatch(authSuccess(data.token.access))\r\n        dispatch(autoLogout(new Date(data.expiresIn).getTime()-new Date().getTime()))\r\n    }\r\n}\r\n\r\nexport function autoLogout(time) {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout())\r\n        }, time)\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('expirationDate')\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport function authSuccess(token) {\r\n    return {\r\n        type: AUTH_SUCCESS, token\r\n    }\r\n}\r\n\r\nexport function autoLogin() {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        if (!token) {\r\n            dispatch(logout())\r\n        } else {\r\n            const expirationDate = localStorage.getItem('expirationDate')\r\n            if (expirationDate<= new Date()) {\r\n                dispatch(logout())\r\n            } else {\r\n                dispatch(authSuccess(token))\r\n                dispatch(autoLogout((new Date(expirationDate).getTime() - new Date().getTime())))\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Button from \"../UI/Button/Button\";\r\nimport Input from \"../UI/Input/Input\";\r\nimport is from \"is_js\"\r\nimport {connect} from \"react-redux\";\r\nimport {auth} from \"../../store/actions/auth\";\r\n\r\nclass Auth extends React.Component {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            email: {\r\n                value: '',\r\n                type: 'email',\r\n                label: 'Email',\r\n                errorMessage: 'Введите корректный email',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    email: true\r\n                }\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                errorMessage: 'Введите корректный пароль',\r\n                valid: false,\r\n                touched: false,\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                }\r\n            }\r\n        }\r\n    }\r\n    loginHandler = () => {\r\n        this.props.auth(\r\n            this.state.formControls.email.value,\r\n            this.state.formControls.password.value,\r\n        )\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    onChangeHandler = (event, controlName) => {\r\n        const formControls = {...this.state.formControls}\r\n        const control = {...this.state.formControls[controlName]}\r\n        control.value = event.target.value\r\n        control.touched = true\r\n        control.valid = this.validateControl(control.value, control.validation)\r\n        formControls[controlName] = control\r\n        let isFormValid = true;\r\n        Object.keys(formControls).forEach(name => {\r\n            isFormValid = formControls[name].valid && isFormValid\r\n        })\r\n        this.setState({\r\n            formControls, isFormValid\r\n        })\r\n    }\r\n\r\n    validateControl(value, validation) {\r\n        if (!validation) return true\r\n        let isValid = true\r\n        if (validation.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n        if (validation.email) {\r\n            isValid = is.email(value) && isValid\r\n        }\r\n        if (validation.minLength) {\r\n            isValid = value.length >= validation.minLength && isValid\r\n        }\r\n        return isValid\r\n    }\r\n\r\n    renderInputs() {\r\n        return Object.keys(this.state.formControls).map((controlName, index) => {\r\n            const control = this.state.formControls[controlName];\r\n            return (\r\n                <Input\r\n                    key={controlName + index}\r\n                    type={control.type}\r\n                    value={control.value}\r\n                    valid={control.valid}\r\n                    touched={control.touched}\r\n                    label={control.label}\r\n                    shouldValidate={!!control.validation}\r\n                    errorMessage={control.errorMessage}\r\n                    onChange={event => this.onChangeHandler(event, controlName)}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'Auth'}>\r\n                <div>\r\n                    <h1>Авторизация</h1>\r\n                    <form onSubmit={this.submitHandler} className={'AuthForm'}>\r\n                        {this.renderInputs()}\r\n                        <Button type={'success'} disabled={!this.state.isFormValid}\r\n                                onClick={this.loginHandler}>Войти</Button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        auth: (email,password) => dispatch(auth(email, password))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Auth)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../store/actions/auth\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nclass Logout extends React.Component {\r\n    componentDidMount() {\r\n        this.props.logout()\r\n    }\r\n    render() {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        logout: () => dispatch(logout())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout)","import './Select.css'\r\nconst Select = props => {\r\n    const htmlFor= `${props.label}-${Math.random()}`\r\n    return (\r\n        <div className={'Select'}>\r\n            <label htmlFor={htmlFor}>{props.label}</label>\r\n            <select\r\n                id={htmlFor}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            >\r\n                {props.options.map((option, index) => {\r\n                    return (<option\r\n                        value={option.value} key={option.value + index}>\r\n                        {option.text}\r\n                    </option>)\r\n                })}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Select","import axios from \"axios\";\r\nimport {\r\n    CHANGE_COMPANY_ITEM,\r\n    CHANGE_CURRENT_PAGE,\r\n    FETCH_COMPANIES_LIST,\r\n    FETCH_HOUSES_LIST,\r\n    GET_PAGES_INFO, REMOVE_CURRENT_HOUSES\r\n} from \"./actionTypes\";\r\n\r\nexport function getCompanies(token) {\r\n    return async dispatch => {\r\n        let url = 'http://test-alpha.reestrdoma.ru/api/reestrdoma/companies/'\r\n        const response = await axios.get(url, {headers: {Authorization: `Bearer ${token}`}})\r\n        const data = response.data.data;\r\n        dispatch(getCompanyItems(data))\r\n        dispatch(getHouses(data[0].name))\r\n    }\r\n}\r\n\r\nexport function getHouses (company) {\r\n    return async (dispatch, getState) => {\r\n        dispatch(removeHouses())\r\n        if (company !== getState().main.currentCompany) changePageNumInState(1, dispatch, getState)\r\n        const pagInfo = getState().main.paginationInfo\r\n        const currentCompany = getState().main.companies.find(element => element.name === company)\r\n        dispatch(changeCurrentCompany(company))\r\n        let url = `http://test-alpha.reestrdoma.ru/api/reestrdoma/company/houses/${currentCompany.id}/?page=${pagInfo.currentPage}&perPage=${pagInfo.elementsPerPage}`\r\n        const response = await axios.get(url, {headers: {Authorization: `Bearer ${getState().auth.token}`}})\r\n        const data = response.data\r\n        const newPagInfo = {...pagInfo, ...data.links}\r\n        dispatch(getPaginationInfo(newPagInfo))\r\n        dispatch(getHousesItems(data.data))\r\n    }\r\n}\r\n\r\nfunction changePageNumInState(pageNum, dispatch, getState) {\r\n    const paginationInfo = {...getState().main.paginationInfo}\r\n    paginationInfo.currentPage = pageNum\r\n    dispatch(changeCurrentPage(paginationInfo))\r\n}\r\n\r\nexport function changePagPage(pageNum) {\r\n    return (dispatch, getState) => {\r\n        dispatch(removeHouses())\r\n        changePageNumInState(pageNum, dispatch, getState)\r\n        dispatch(getHouses(getState().main.currentCompany))\r\n    }\r\n}\r\n\r\nexport function getCompanyItems (companies) {\r\n    return {\r\n        type: FETCH_COMPANIES_LIST, companies\r\n    }\r\n}\r\n\r\nexport function getHousesItems(houses) {\r\n    return {\r\n        type: FETCH_HOUSES_LIST, houses\r\n    }\r\n}\r\n\r\nexport function changeCurrentCompany(currentCompany) {\r\n    return {\r\n        type: CHANGE_COMPANY_ITEM, currentCompany\r\n    }\r\n}\r\n\r\nexport function getPaginationInfo(paginationInfo) {\r\n    return {\r\n        type: GET_PAGES_INFO, paginationInfo\r\n    }\r\n}\r\n\r\nexport function changeCurrentPage(paginationInfo) {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE, paginationInfo\r\n    }\r\n}\r\n\r\nexport function removeHouses() {\r\n    return {\r\n        type: REMOVE_CURRENT_HOUSES\r\n    }\r\n}","import './Loader.css'\r\n\r\nconst Loader = props => {\r\n    return (\r\n        <div style={{textAlign: \"center\"}}>\r\n            <div className={'Loader'}>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n                <div/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Loader","const Table = props => {\r\n    const rows = props.houses.map((house,index) => {\r\n        return (\r\n\r\n            <tr key={index}>\r\n                <td>{house.id}</td>\r\n                <td style={{textAlign:\"left\"}}>{house.address}</td>\r\n                <td>{house.reestrFlatCount}</td>\r\n                <td>{new Date(house.createdAt).toLocaleDateString()}</td>\r\n            </tr>\r\n\r\n        )\r\n    })\r\n    return (\r\n        <div className={'Table'}>\r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <th>id</th>\r\n                    <th>Адрес</th>\r\n                    <th>Количество квартир</th>\r\n                    <th>Дата добавления</th>\r\n                </tr>\r\n                {rows}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import './Pagination.css'\r\nconst Pagination = props => {\r\n    const currentPage = props.info.currentPage;\r\n    const pagesCount = Math.ceil(props.info.objectsCount / props.info.elementsPerPage)\r\n    const paginationStart = 1\r\n    const paginationEnd = pagesCount;\r\n    const paginationCenter = [currentPage-2, currentPage-1, currentPage, currentPage+1, currentPage+2]\r\n        .filter(pageNumber => pageNumber > 1 && pageNumber < pagesCount )\r\n    let pagination = [paginationStart, ...paginationCenter, paginationEnd].map((element,index) => {\r\n        return (\r\n            <span key={index} onClick={props.onChangePage} className={props.info.currentPage === element? 'active': ''}>\r\n                {element}\r\n            </span>\r\n        )\r\n    })\r\n    if (pagesCount === 1) pagination = <span onClick={props.onChangePage} className={'active'}>1</span>\r\n        return (\r\n        <div className={'Pagination'}>\r\n            {pagination}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Select from \"../UI/select/Select\";\r\nimport {changePagPage, getCompanies, getHouses} from \"../../store/actions/main\";\r\nimport Loader from \"../UI/Loader/Loader\";\r\nimport Table from \"../Table/Table\";\r\nimport Pagination from \"../UI/Pagination/Pagination\";\r\nclass Main extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getCompanies(this.props.token)\r\n    }\r\n    selectChangeHandler = event => {\r\n        this.props.getHouses(event.target.value)\r\n    }\r\n    changePageHandler = event => {\r\n        this.props.changePagPage(Number(event.target.textContent))\r\n    }\r\n\r\n    render() {\r\n        let table = <Loader/>\r\n        if (this.props.houses) {\r\n            if (this.props.houses.length) {\r\n                table = <>\r\n                    <Table houses={this.props.houses} />\r\n                    <Pagination info={this.props.paginationInfo} onChangePage={this.changePageHandler}/>\r\n                    </>\r\n            }\r\n            else {\r\n                table = <h1>Не найдено домов для текущей организации</h1>\r\n            }\r\n        }\r\n        return (\r\n            <div className={'Main'}>\r\n                {this.props.companies?\r\n                    <Select label={'Выберите организацию'}\r\n                        onChange={this.selectChangeHandler}\r\n                            value={this.props.currentCompany || this.props.companies[0]}\r\n                            options={this.props.companies.map(element => {\r\n                                return {\r\n                                    value: element.name,\r\n                                    text: element.name\r\n                                }\r\n                            })}/>\r\n                    : null}\r\n                {table}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.auth.token,\r\n        companies: state.main.companies,\r\n        currentCompany: state.main.currentCompany,\r\n        houses: state.main.houses,\r\n        paginationInfo: state.main.paginationInfo,\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        getCompanies : token => dispatch(getCompanies(token)),\r\n        getHouses: company => dispatch(getHouses(company)),\r\n        changePagPage: page => dispatch(changePagPage(page))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)","import React from \"react\";\nimport Layout from \"./components/Layout/Layout\";\nimport Auth from \"./components/Auth/Auth\";\nimport {autoLogin} from './store/actions/auth'\nimport {Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport Logout from \"./components/Logout/Logout\";\nimport Main from \"./components/Main/Main\";\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.autoLogin()\n    }\n\n    render() {\n        let routes = (<Switch>\n            <Route path={'/auth'} component={Auth}/>\n            <Redirect to={'/auth'}/>\n        </Switch>)\n        if (this.props.isAuthenticated) {\n            routes = (<Switch>\n                <Route path={'/logout'} component={Logout}/>\n                <Route path={'/'} exact component={Main}/>\n                <Redirect to={'/'}/>\n            </Switch>)\n        }\n        return (\n            <div className=\"App\">\n                <Layout>\n                    {routes}\n                </Layout>\n            </div>\n        );\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        isAuthenticated: !!state.auth.token\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        autoLogin: () => dispatch(autoLogin())\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n\n","import {AUTH_LOGOUT, AUTH_SUCCESS} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    token: null\r\n}\r\n\r\nexport default function auth(state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n        case AUTH_SUCCESS:\r\n            return {\r\n                ...state, token: action.token\r\n            }\r\n        case AUTH_LOGOUT:\r\n            return {\r\n                ...state, token: null\r\n            }\r\n    }\r\n}","import {\r\n    CHANGE_COMPANY_ITEM,\r\n    CHANGE_CURRENT_PAGE,\r\n    FETCH_COMPANIES_LIST,\r\n    FETCH_HOUSES_LIST,\r\n    GET_PAGES_INFO, REMOVE_CURRENT_HOUSES\r\n} from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    companies: null,\r\n    currentCompany: null,\r\n    houses: null,\r\n    loading: false,\r\n    paginationInfo: {currentPage: 1, elementsPerPage: 15}\r\n}\r\n\r\nexport default function main(state = initialState, action) {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n        case FETCH_COMPANIES_LIST:\r\n            return {\r\n                ...state, companies: action.companies\r\n            }\r\n        case FETCH_HOUSES_LIST:\r\n            return {\r\n                ...state, houses: action.houses\r\n            }\r\n        case CHANGE_COMPANY_ITEM:\r\n            return {\r\n                ...state, currentCompany: action.currentCompany\r\n            }\r\n        case GET_PAGES_INFO:\r\n            return {\r\n                ...state, paginationInfo: action.paginationInfo\r\n            }\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state, paginationInfo: action.paginationInfo\r\n            }\r\n        case REMOVE_CURRENT_HOUSES:\r\n            return {\r\n                ...state, houses: null\r\n            }\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport authReducer from \"./auth\";\r\nimport mainReducer from './main'\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    main: mainReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {BrowserRouter} from \"react-router-dom\";\nimport {createStore, compose, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport rootReducer from \"./store/reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <React.StrictMode>\n                <App/>\n            </React.StrictMode>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}